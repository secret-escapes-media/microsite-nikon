
// ==================================================================
// HORIZONTAL GRID SYSTEM
// layouts for all sections, using susy grid plugin
// ==================================================================



// -------- general --------

$susy:(
  columns: 12,
  container: 100%,
  global-box-sizing: border-box,
  gutters: 0,
);
$gutters:( gutters: 1/2 );
$page-margin: $s4;


// -------- two col grid mixin --------
// creates two columns in 12 column grid with optional gutters
// column number scheme e.g.  6-6 = 50% 50%    4-8 = 33% x 66%
@mixin two-column-grid( $col1, $col2, $has-gutters: null ) {
  .col {
    @if $has-gutters {
      @include span( $gutters $col1 );
    } @else {
      @include span( $col1 );
    }
  }
  .col:nth-child( even ) {
    @if $has-gutters {
      @include span( $gutters last $col2 );
    } @else {
       @include span( last $col2 );
    }
  }
}


.row {
  position: relative;
  @include container($xxxl);
  &--100 { @include container(100%);}
  &--xxxl{ @include container($xxxl);}
  &--xxl { @include container($xxl);}
  &--xl  { @include container($xl);}
  &--lg  { @include container($lg);}
  &--md  { @include container($md);}
  &--sm  { @include container($sm);}
  &--padding {
    padding-left: $s2;
    padding-right: $s2;
    @include bp(md){
      padding-left: $s4;
      padding-right: $s4;
    }
  }
  &--margin {
    margin-left: $s2;
    margin-right: $s2;
    @include bp(md){
      margin-left: $s4;
      margin-right: $s4;
    }
  }

  // breakpoint for all columns
  @include bp(lg){

    // aligns columns vertically
    .flexbox &--valign {
      display: flex;
      align-items: center;
    }

    // two columns without gutter
    &--4-8 { @include two-column-grid( 4, 8 ); }
    &--5-7 { @include two-column-grid( 5, 7 ); }
    &--6-6 { @include two-column-grid( 6, 6 ); }
    &--7-5 { @include two-column-grid( 7, 5 ); }
    &--8-4 { @include two-column-grid( 8, 4 ); }

    // two columns with gutter
    &--4-8-gutters { @include two-column-grid( 4, 8, gutters ); }
    &--5-7-gutters { @include two-column-grid( 5, 7, gutters ); }
    &--6-6-gutters { @include two-column-grid( 6, 6, gutters ); }
    &--7-5-gutters { @include two-column-grid( 7, 5, gutters ); }
    &--8-4-gutters { @include two-column-grid( 8, 4, gutters ); }

    // three columns without gutter
    &--4-4-4 .col {
      @include gallery(4);
    }

    // three columns with gutter
    &--4-4-4-gutters .col {
      @include gallery($gutters 4);
      margin-bottom: gutter();
    }

    // three columns without gutter
    &--3-3-3-3 .col {
      @include gallery(3);
    }

    // three columns with gutter
    &--3-3-3-3-gutters .col {
      @include gallery($gutters 3);
      margin-bottom: gutter();
    }
  }

  .row--nobp {
    &.row--4-8 { @include two-column-grid( 4, 8 ); }
    &.row--5-7 { @include two-column-grid( 5, 7 ); }
    &.row--6-6 { @include two-column-grid( 6, 6 ); }
    &.row--7-5 { @include two-column-grid( 7, 5 ); }
    &.row--8-4 { @include two-column-grid( 8, 4 ); }
    &.row--4-8-gutters { @include two-column-grid( 4, 8, gutters ); }
    &.row--5-7-gutters { @include two-column-grid( 5, 7, gutters ); }
    &.row--6-6-gutters { @include two-column-grid( 6, 6, gutters ); }
    &.row--7-5-gutters { @include two-column-grid( 7, 5, gutters ); }
    &.row--8-4-gutters { @include two-column-grid( 8, 4, gutters ); }
    & .col { margin-top: 0; }
  }
}



// ==================================================================
// VERTICAL SPACING
// controls the vertical spacing, between elements and in general
// ==================================================================



// default sections
.section {
  padding-top: $s8;
  padding-bottom: $s8;
}

.row {
  & + & { margin-top: $s6; }
}

.col {
  & + & {
    margin-top: $s4;
    @include bp(lg){ margin-top: 0; }
  }
}

// equal vertical padding for large elements
// !!!!!!!!!! this could all be on the section, eg short section, massive section etc
.vpad {
  &--sm    { padding-top: $s2; padding-bottom: $s2; }
  &--md    { padding-top: $s4; padding-bottom: $s4; }
  &--lg    { padding-top: $s6; padding-bottom: $s6; }
  &--xl    { padding-top: $s8; padding-bottom: $s8; }
  &--xxl   { padding-top: $s8; padding-bottom: $s8; }
  &--xxxl  { padding-top: $s8; padding-bottom: $s8; }
  &--xxxxl { padding-top: $s8; padding-bottom: $s8; }
  @include bp(lg){
    &--xxl   { padding-top: $s10; padding-bottom: $s10; }
    &--xxxl  { padding-top: $s12; padding-bottom: $s12; }
    &--xxxxl { padding-top: $s14; padding-bottom: $s14; }
  }
  &-top {
    &--sm    { padding-top: $s2; }
    &--md    { padding-top: $s4; }
    &--lg    { padding-top: $s6; }
    &--xl    { padding-top: $s8; }
    &--xxl   { padding-top: $s8; }
    &--xxxl  { padding-top: $s8; }
    &--xxxxl { padding-top: $s8; }
    @include bp(lg){
      &--xxl   { padding-top: $s10; }
      &--xxxl  { padding-top: $s12; }
      &--xxxxl { padding-top: $s14; }
    }
  }
  &-bottom {
    &--sm    { padding-bottom: $s2; }
    &--md    { padding-bottom: $s4; }
    &--lg    { padding-bottom: $s6; }
    &--xl    { padding-bottom: $s8; }
    &--xxl   { padding-bottom: $s8; }
    &--xxxl  { padding-bottom: $s8; }
    &--xxxxl { padding-bottom: $s8; }
    @include bp(lg){
      &--xxl   { padding-bottom: $s10; }
      &--xxxl  { padding-bottom: $s12; }
      &--xxxxl { padding-bottom: $s14; }
    }
  }
}

// add in the occasional space for internal content
.space {
  &--sm    { padding-top: $s0; }
  &--md    { padding-top: $s2; }
  &--lg    { padding-top: $s6; }
  &--xl    { padding-top: $s8; }
  &--xxl   { padding-top: $s8; }
  &--xxxl  { padding-top: $s8; }
  &--xxxxl { padding-top: $s8; }
  @include bp(lg){
    &--xxl   { padding-bottom: $s10; }
    &--xxxl  { padding-bottom: $s12; }
    &--xxxxl { padding-bottom: $s14; }
  }
}

// box padding for inner page elements like offer cards
.boxpad {
  &--sm   { padding: $s2; }
  &--md   { padding: $s4; }
  &--lg   { padding: $s6; }
  &--xl   { padding: $s8; }
  &--xxl  { padding: $s10; }
}



// Bob is a type of layout that we use frequently for featured content. We
// couldn't think of an accurate and consise name so we called it Bob. Its
// columns with a feature image and copy that swap columns in alternating order.
// it needs a higher breakpoint than the rest of the grid amongst other things

.bob {
  @include layout(12 1/2);
  text-align: center;
  &__image {
    max-width: $lg;
    margin-left: auto;
    margin-right: auto;
  }
  &__text { padding-top: $s2; }
  & + & { margin-top: $s4; }
  @include bp(xxl){
    text-align: left;
    &__text { padding-top: $s2; }
    // GRID STUFF
    & + & { margin-top: gutter(6); }
    .flexbox & {
      display: flex;
      align-items: center;
    }
    &__image { @include span(7); }
    &__text {
      @include span(5 last);
      padding-top: 0;
    }
    &:nth-child(even),
    &.bob--swap {
      .bob__image { @include span(7 last); }
      .bob__text { @include span(5); }
      .flexbox & {
        flex-direction: row-reverse;
      }
    }
    // END GRID STUFF
  }
}



// Harvey is Bob's second cousin on his Mother's side. He was a troubled
// youth and, after years of medical examination Harvey was diagnosed with
// multipersonality disorder. It is this disorder which allows him to build
// the following two sided image/text layouts.
// Harvey is a 50/50 text image layout with no gutter. Use Harvey to make
// an alternating full width section with centred text, and limited height
// image sizing so the layout works across screens and sizes.
.harvey {
  @include container(100%);
  @include layout(12 0);
  padding: 0;
  &__text {
    padding: $s2 $s2 $s5;
  }
  &__image {
    display: block;
    position: relative;
    width: 100%;
    @include background-attributes;
    &:before {
      display: block;
      content: "";
      width: 100%;
      padding-top: 66.666666666667%;
    }
    &-link {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: $z-content;
    }
  }
  @include bp(xl){
    .flexbox & {
      display: flex;
      align-items: center;
    }
    &__image {
      @include span(6);
      min-height: 400px;
      max-height: 500px;
    }
    &__text {
      @include span(6 last);
      max-width: 600px;
      padding: $s3;
      margin-left: auto;
      margin-right: auto;
    }
    &--swap{
      &__image { @include span(6 last); }
      &__text { @include span(6); }
      .flexbox & {
        display: flex;
        align-items: center;
        flex-direction: row-reverse;
      }
    }
  }
}